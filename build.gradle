plugins {
	id 'application'
	id 'idea'
	id 'maven'
	id 'org.jetbrains.kotlin.jvm' version '1.3.61'
	id 'com.github.ben-manes.versions' version '0.27.0'
}

repositories {
	mavenCentral()
	mavenLocal()
	jcenter()
}

mainClassName = "github.macro.Launcher"
def loggerVersion = '2.13.0'
def jacksonVersion = '2.10.2'

dependencies {
	implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
	implementation group: 'no.tornado', name:'tornadofx', version: "1.7.19"
	implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: "$jacksonVersion"
	implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: "$jacksonVersion"
	implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jdk8', version: "$jacksonVersion"
	implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: "$loggerVersion"
	runtimeOnly group: 'org.apache.logging.log4j', name: 'log4j-core', version: "$loggerVersion"
}

compileKotlin {
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8

	kotlinOptions {
		jvmTarget = "1.8"
		apiVersion = "1.3"
		languageVersion = "1.3"
		suppressWarnings = true
	}
}

compileTestKotlin {
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8

	kotlinOptions {
		jvmTarget = "1.8"
		apiVersion = "1.3"
		languageVersion = "1.3"
		suppressWarnings = true
	}
}

jar {
	manifest.attributes provider: 'gradle'
}

run {
	standardInput = System.in
}

def isNonStable = { String version ->
	def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
	def regex = /^[0-9,.v-]+(-r)?$/
	return !stableKeyword && !(version ==~ regex)
}

dependencyUpdates {
	checkForGradleUpdate = false

	// Example 1: reject all non stable versions
	rejectVersionIf {
		isNonStable(candidate.version)
	}

	// Example 2: disallow release candidates as upgradable versions from stable versions
	rejectVersionIf {
		isNonStable(candidate.version) && !isNonStable(currentVersion)
	}

	// Example 3: using the full syntax
	resolutionStrategy {
		componentSelection {
			all {
				if (isNonStable(candidate.version) && !isNonStable(currentVersion)) {
					reject('Release candidate')
				}
			}
		}
	}
}