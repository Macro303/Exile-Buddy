plugins {
	id 'application'
	id 'idea'
	id 'maven'
	id 'org.jetbrains.kotlin.jvm' version '1.3.71'
	id 'com.github.ben-manes.versions' version '0.28.0'
	id 'com.github.johnrengelman.shadow' version '5.2.0'
}

repositories {
	mavenCentral()
	mavenLocal()
	jcenter()
}

mainClassName = "github.macro.Launcher"
def loggerVersion = '2.13.1'
def jacksonVersion = '2.10.3'

dependencies {
	implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
	implementation group: 'no.tornado', name: 'tornadofx', version: "1.7.20"
	implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: "$jacksonVersion"
	implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: "$jacksonVersion"
	implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jdk8', version: "$jacksonVersion"
	implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: "$loggerVersion"
	runtimeOnly group: 'org.apache.logging.log4j', name: 'log4j-core', version: "$loggerVersion"
}

compileKotlin {
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8

	kotlinOptions {
		jvmTarget = "1.8"
		apiVersion = "1.3"
		languageVersion = "1.3"
		suppressWarnings = true
	}
}

compileTestKotlin {
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8

	kotlinOptions {
		jvmTarget = "1.8"
		apiVersion = "1.3"
		languageVersion = "1.3"
		suppressWarnings = true
	}
}

jar {
	manifest.attributes provider: 'gradle'
	from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

shadowJar {
	archiveBaseName.set('Exile-Buddy')
	archiveClassifier.set(null)
	archiveVersion.set(null)
}

run {
	standardInput = System.in
}

clean {
	delete 'release'
}

task moveReleaseScripts(type: Copy) {
	from 'scripts'
	into "$buildDir/libs"
}

task moveReleaseGems(type: Copy) {
	from 'gems'
	into "$buildDir/libs/gems"
}

task moveReleaseEquipment(type: Copy) {
	from 'equipment'
	into "$buildDir/libs/equipment"
}

task fullRelease(type: Zip) {
	dependsOn 'shadowJar', 'moveReleaseScripts', 'moveReleaseGems', 'moveReleaseEquipment'

	from "$buildDir/libs"
	include '*'
	include '*/*'
	archiveFileName = 'Exile-Buddy-all.zip'
	destinationDir(file('release'))
}

task jarRelease(type: Zip) {
	dependsOn 'shadowJar', 'moveReleaseScripts'

	from "$buildDir/libs"
	include '*.jar'
	include '*.sh'
	include '*.bat'
	archiveFileName = 'Exile-Buddy.zip'
	destinationDir(file('release'))
}

task gemRelease(type: Zip) {
	from "gems"
	include '*'
	include '*/*'
	archiveFileName = 'Exile-Buddy-gems.zip'
	destinationDir(file('release'))
}

task equipmentRelease(type: Zip) {
	from 'equipment'
	include '*'
	include '*/*'
	archiveFileName = 'Exile-Buddy-equipment.zip'
	destinationDir(file('release'))
}

task release {
	dependsOn 'fullRelease', 'jarRelease', 'gemRelease', 'equipmentRelease'
}

def isNonStable = { String version ->
	def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
	def regex = /^[0-9,.v-]+(-r)?$/
	return !stableKeyword && !(version ==~ regex)
}

dependencyUpdates {
	checkForGradleUpdate = false

	// Example 1: reject all non stable versions
	rejectVersionIf {
		isNonStable(candidate.version)
	}

	// Example 2: disallow release candidates as upgradable versions from stable versions
	rejectVersionIf {
		isNonStable(candidate.version) && !isNonStable(currentVersion)
	}

	// Example 3: using the full syntax
	resolutionStrategy {
		componentSelection {
			all {
				if (isNonStable(candidate.version) && !isNonStable(currentVersion)) {
					reject('Release candidate')
				}
			}
		}
	}
}